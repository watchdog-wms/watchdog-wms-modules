<?xml version="1.0" encoding="UTF-8" ?>
<x:schema xmlns:x="http://www.w3.org/2001/XMLSchema" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" vc:minVersion="1.1" xmlns:xerces="http://xerces.apache.org">

	<!-- definition of the task parameters -->
	<x:complexType name="varScanMpileupTaskParameterType">
		<x:all>
			<x:element name="infile" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="unbounded" />
			<x:element name="method" type="paramString" minOccurs="0" maxOccurs="1" />
			<x:element name="jar" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="1" />
			<x:element name="reference" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="1" />
			<x:element name="minCoverage" type="paramIntegerGreater_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="minReads2" type="paramIntegerGreater_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="minAvgQual" type="paramIntegerGreater_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="minVarFreq" type="paramDoubleGreater_minVarFreq_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="minFreqForHom" type="paramDoubleGreater_minFreqForHom_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="pValue" type="paramDoubleGreater_pValue_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="strandFilter" type="paramIntegerRange_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="outputVcf" type="paramIntegerRange_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="vcfSampleList" type="paramAbsoluteFilePath" minOccurs="0" maxOccurs="1" />
			<x:element name="variants" type="paramIntegerRange_varScanMpileup" minOccurs="0" maxOccurs="1" />
			<x:element name="output" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="1" />
		</x:all>
	</x:complexType>

	<!-- change default attributes -->
	<x:complexType name="varScanMpileupTaskOverrideType">
		<x:complexContent>
			<x:restriction base="baseAttributeTaskType">
				<x:attribute name="binName" type="x:string" fixed="varScanMpileup.sh" />
			</x:restriction>
		</x:complexContent>
	</x:complexType>

	<!-- definition of final task -->
	<x:complexType name="varScanMpileupTaskType">
		<x:complexContent>
			<x:extension base="varScanMpileupTaskOverrideType">
				<x:all>
					<x:element name="parameter" type="varScanMpileupTaskParameterType" minOccurs="1" maxOccurs="1" />
					<x:group ref="defaultTaskElements" />
				</x:all>
			</x:extension>
		</x:complexContent>
	</x:complexType>

	<!-- make task definition availible via substitution group -->
	<x:element name="varScanMpileupTask" type="varScanMpileupTaskType" substitutionGroup="abstractTask" />

	<!-- module specific parameter types -->
	<x:complexType name="paramIntegerGreater_varScanMpileup">
		<x:simpleContent>
			<x:restriction base="paramInteger">
				<x:assertion test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or x:integer($value) >= 1" xerces:message="Parameter must be equal or greater than 1." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>
	<x:complexType name="paramDoubleGreater_minVarFreq_varScanMpileup">
		<x:simpleContent>
			<x:restriction base="paramDouble">
				<x:assertion test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or x:double($value) >= 0" xerces:message="Parameter with name 'minVarFreq' must be equal or greater than 0." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>
	<x:complexType name="paramDoubleGreater_minFreqForHom_varScanMpileup">
		<x:simpleContent>
			<x:restriction base="paramDouble">
				<x:assertion test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or x:double($value) >= 0" xerces:message="Parameter with name 'minFreqForHom' must be equal or greater than 0." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>
	<x:complexType name="paramDoubleGreater_pValue_varScanMpileup">
		<x:simpleContent>
			<x:restriction base="paramDouble">
				<x:assertion test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or x:double($value) >= 0" xerces:message="Parameter with name 'pValue' must be equal or greater than 0." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>
	<x:complexType name="paramIntegerRange_varScanMpileup">
		<x:simpleContent>
			<x:restriction base="paramInteger">
				<x:assertion test="matches($value, '(\$\{[A-Za-z_]+\})|(\$\(.+\))|([\[\(\{](\$[A-Za-z_]+(,\s*){0,1}){0,1}([0-9]+(,\S*){0,1}){0,1}[\]\)\}])') or (x:integer($value) >= 0 and x:integer($value) &lt;= 1)" xerces:message="Parameter must be between 0 and 1." />
			</x:restriction>
		</x:simpleContent>
	</x:complexType>
</x:schema>

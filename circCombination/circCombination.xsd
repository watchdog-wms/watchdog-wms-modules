<?xml version="1.0" encoding="UTF-8" ?>
<x:schema xmlns:x="http://www.w3.org/2001/XMLSchema" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" vc:minVersion="1.1" xmlns:xerces="http://xerces.apache.org">

	<!-- module to combine the predicted circRNAs from the CIRI2 and the circRNAfinder module -->
	<!-- REQUIREMENTS: python3 -->

	<!-- definition of the parameters of the module -->
	<x:complexType name="circCombinationTaskParameterType">
		<x:all>
			<!-- input files -->
			<!-- first circRNA file (produced by the CIRI2 or circRNA_finder module -->
			<x:element name="inCircs1" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="1" />
			<!-- second circRNA file (produced by the CIRI2 or circRNA_finder module -->
			<x:element name="inCircs2" type="paramAbsoluteFilePath" minOccurs="1" maxOccurs="1" />
			<!-- output files -->
			<!-- intersection of the predictions filtered according to minReads -->
			<x:element name="outIntersection" type="paramString" minOccurs="1" maxOccurs="1" />
			<!-- union of the predictions filtered according to minReads -->
			<x:element name="outUnion" type="paramString" minOccurs="1" maxOccurs="1" />
			<!-- intersection of the predicted coordinates but union of the read counts, filtered according to minReads -->
			<x:element name="outIntersectedUnion" type="paramString" minOccurs="1" maxOccurs="1" />
			<!-- optional settings -->
			<!-- minimum number of supporting junction reads to keep a circRNA in the output file -->
			<x:element name="minReads" type="paramInteger" minOccurs="0" maxOccurs="1" />
		</x:all>
	</x:complexType>

	<!-- definition of the return parameters of the module -->
	<x:complexType name="circCombinationTaskReturnType">
		<x:complexContent>
			<x:extension base="taskReturnType">
				<x:all>
					<!-- returns file path of the tables with the intersection and union of predicted circular RNAs -->
					<x:element name="circIntersection" type="x:string"/>
					<x:element name="circUnion" type="x:string"/>
					<x:element name="circIntersectedUnion" type="x:string"/>
				</x:all>
			</x:extension>
		</x:complexContent>
	</x:complexType>

	<!-- set command of script to call -->
	<x:complexType name="circCombinationTaskOverrideType">
		<x:complexContent>
			<x:restriction base="baseAttributeTaskType">
				<x:attribute name="binName" type="x:string" fixed="main_circ_combination.py" />
				<x:attribute name="preBinCommand" type="x:string" fixed="python3" />
			</x:restriction>
		</x:complexContent>
 	</x:complexType>

 	<!-- definition of the components of the module -->
	<x:complexType name="circCombinationTaskType">
		<x:complexContent>
			<x:extension base="circCombinationTaskOverrideType">
				<x:all>
					<x:element name="parameter" type="circCombinationTaskParameterType" minOccurs="1" maxOccurs="1" />
					<x:element name="return" type="circCombinationTaskReturnType" minOccurs="0" maxOccurs="0" />
					<x:group ref="defaultTaskElements" />
				</x:all>
			</x:extension>
		</x:complexContent>
	</x:complexType>

 	<!--  define name of the module and make it available -->
 	<x:element name="circCombinationTask" type="circCombinationTaskType" substitutionGroup="abstractTask" />

</x:schema>